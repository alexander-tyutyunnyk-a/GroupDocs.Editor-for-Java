"use strict"; (function () { function t(n) { var t, i; this._editor = n; t = []; this.process = function (i) { n.document.find(i).toArray().forEach(function (n) { t.push(n) }) }; this.clearBuffer = function () { return t = [] }; this.getNotesById = function (n) { return t[n] }; i = function (n) { var f = n.getClientRect(!0), i, r, u, e; if (!f) return null; for (i = { start: null, finish: null }, r = 0; r < t.length; r++)if (u = t[r], e = u.getClientRect(!0), f.top > e.top && (i.start = u), f.top < e.top) { i.finish = u; break } return !i.start || !i.finish ? null : i }; this.getElementsInSection = function (n, t) { var f = i(n), u, r; if (!f) return null; for (u = [], r = f.start.getNext(); r && !r.equals(f.finish);)u = u.concat(t(r)), r = r.getNext(); return u }; this.getFirstElementInSection = function (n, t) { var i = this.getElementsInSection(n, t); return i && i.length > 0 ? i[0] : null }; this.getLastElementInSection = function (n, t) { var i = this.getElementsInSection(n, t); return i && i.length > 0 ? i[i.length - 1] : null }; this.getElementsBySection = function (n) { for (var i, u, f = [], r = 0; r < t.length; r++) { if (r === t.length - 1) return f; for (i = t[r].getNext(), u = []; i && !i.equals(t[r + 1]);)u = u.concat(n(i)), i = i.getNext(); f.push(u) } return f } } function n(n) { this._editor = n; var t = []; this.processFootnotes = function (i) { n.document.find(i).toArray().forEach(function (n) { t[n.getId()] = n.remove() }) }; this.clearBuffer = function () { return t = [] }; this.getNotesById = function (n) { return t[n] } } CKEDITOR.plugins.add("gdeditorFootnotes", { requires: "gdeditor", init: function (n) { n.addCommand("footnotesInit", new CKEDITOR.footnotesInit); n.addCommand("addFootnotes", new CKEDITOR.addFootnotes); n.addCommand("removeFootnotes", new CKEDITOR.removeFootnotes) }, beforeInit: function (i) { CKEDITOR.plugins.footnotes = new n(i); CKEDITOR.plugins.section = new t(i) }, afterInit: function () { CKEDITOR.MutationRepo.addToRepo(CKEDITOR.MutationRepoType.childListAdd, { tagName: "a", command: "addFootnotes", priority: 1 }); CKEDITOR.MutationRepo.addToRepo(CKEDITOR.MutationRepoType.childListRemove, { tagName: "a", command: "removeFootnotes", priority: 1 }) } }); CKEDITOR.plugins.section = t; CKEDITOR.plugins.footnotes = n; CKEDITOR.plugins.footnotesSelector = { ftn: "div[id^=_ftn]", edn: "div[id^=_edn]" }; n.prototype = {}; CKEDITOR.footnotesInit = function () { }; CKEDITOR.footnotesInit.prototype = { exec: function () { CKEDITOR.plugins.footnotes.processFootnotes(CKEDITOR.plugins.footnotesSelector.edn); CKEDITOR.plugins.footnotes.processFootnotes(CKEDITOR.plugins.footnotesSelector.ftn); CKEDITOR.plugins.section.process("." + CKEDITOR.plugins.StructureName.SectionSeparator) } }; CKEDITOR.addFootnotes = function () { }; CKEDITOR.addFootnotes.prototype = { exec: function (n, t) { t.hasClass("footnotesCommon") && new CKEDITOR.FootnoteElement(t).addDescription() } }; CKEDITOR.removeFootnotes = function () { }; CKEDITOR.removeFootnotes.prototype = { exec: function (n, t) { t.hasClass("footnotesCommon") && new CKEDITOR.FootnoteElement(t).removeDescription() } }; CKEDITOR.FootnoteElement = function (n) { var t; if (n && n.getName() === "a" && n.hasClass("footnotesCommon")) { t = n; this.href = t.getAttribute("href"); this.getIdHref = this.href ? this.href.substring(1, this.href.length) : ""; this.baseHref = this.getIdHref ? this.getIdHref.substring(0, 4) : ""; this.isDescriptionRef = this.getIdHref ? this.getIdHref.substring(0, 7) === "_ftnref" || this.getIdHref.substring(0, 7) === "_ednref" : !1; this.referenceType = this.baseHref === "_ftn" ? "FootnoteReference" : "EndnoteReference"; var r = function (n, t) { var i = function (n) { var t = new String("ABCDEFGHIJKLMNOPQRSTUVWXYZ"); if (n < 0) throw "Letter numbers should be more that 0"; if (n <= t.length) return t[n - 1]; var r = Math.floor(n / t.length), i = n % t.length, u = ""; return i === 0 && (r-- , i = t.length), u += t[r - 1], u + t[i - 1] }, r = function (n, t) { var i = function i(n) { return n < 1 ? "" : n >= 1e3 ? "M" + i(n - 1e3) : n >= 900 ? "CM" + i(n - 900) : n >= 500 ? "D" + i(n - 500) : n >= 400 ? "CD" + i(n - 400) : n >= 100 ? "C" + i(n - 100) : n >= 90 ? "XC" + i(n - 90) : n >= 50 ? "L" + i(n - 50) : n >= 40 ? "XL" + i(n - 40) : n >= 10 ? "X" + i(n - 10) : n >= 9 ? "IX" + i(n - 9) : n >= 5 ? "V" + i(n - 5) : n >= 4 ? "IV" + i(n - 4) : n >= 1 ? "I" + i(n - 1) : "" }; if (n < 0 || n > 3999) throw "Roman numbers cover a range between 1 and 3999"; return t ? i(n).toUpperCase() : i(n).toLowerCase() }, u = function (n) { var u = "*", f = "†", e = "‡", o = "§", s = 4, r; if (n < 1) throw "Letter numbers should be more that 0"; if (n === 1) return u; if (n === 2) return f; if (n === 3) return e; if (n === 4) return o; var h = Math.floor(n / s), t = n % s, i = undefined; if (t === 1) i = u; else if (t === 2) i = f; else if (t === 3) i = e; else if (t === 0) i = o; else throw "Internal error - unpredictable processing of the Chicago Manual numerals"; return r = h, t > 0 && (r = r + 1), i.repeat(r) }; switch (t) { case 0: return n; case 1: return r(n, !0); case 2: return r(n, !1); case 3: return i(n); case 4: return i(n).toLowerCase(); case 9: return u(n); default: return n } }, i = function (n, t) { var f = n.getAttribute("style"), r, i, u, e; if (!f) return null; for (r = f.split(";"), i = 0; i < r, length; i++)if (u = r[i].split(":"), e = u[0].trim(), e === t) return parseInt(u[1]); return null }, u = function (n) { if (!n) return null; var t = n.getFirst(); return t ? { NumberStyle: i(t, "-aw-footnote-numberstyle"), StartNumber: i(t, "-aw-footnote-startnumber"), RestartRules: i(t, "-aw-footnote-restartRules"), Position: i(t, "-aw-footnote-position") } : null }; this.getArea = function () { var s = this.baseHref === "_ftn", u, f, e, n, o, r; return s ? (u = t.getAscendantByClass(CKEDITOR.plugins.StructureName.SectionClass), !u) ? null : (f = u.findOne("." + CKEDITOR.plugins.StructureName.FootnoteClass, !0), !f) ? null : f : (e = function (n) { return n ? n.find("." + CKEDITOR.plugins.StructureName.EndNoteClass).toArray() : null }, n = CKEDITOR.plugins.section.getFirstElementInSection(t, e), !n) ? null : (o = i(n.getFirst(), "-aw-footnote-position"), o ? (r = t.getDocument().find("." + CKEDITOR.plugins.StructureName.EndNoteClass), !r || r.count() === 0) ? n : r.getItem(r.count() - 1) : n) }; this.removeDescription = function () { var n, u, f; if (this.isDescriptionRef) { var i = this.href.split("ref"), e = "a[href='" + i[0] + i[1] + "']", r = t.getDocument().findOne(e); return r.remove(), new CKEDITOR.FootnoteElement(r).removeDescription() } return n = CKEDITOR.plugins.footnotes.getNotesById(this.getIdHref), n && n.remove(), u = "a[href^='#" + this.baseHref + "']", f = function (n) { if (!n) return null; var t = n.findOne("." + CKEDITOR.plugins.StructureName.ContentClass); return t ? t.find(u).toArray() : [] }, this.setNumber(f), null }; this.addDescription = function () { var i = CKEDITOR.plugins.footnotes.getNotesById(this.getIdHref), n, t; if (!i) { console.log("paste logic of creating new one"); return } n = "a[href^='#" + this.baseHref + "']"; t = function (t) { if (!t) return null; var i = t.findOne("." + CKEDITOR.plugins.StructureName.ContentClass); return i ? i.find(n).toArray() : [] }; this.setDescription(); this.setNumber(t) }; this.setDescription = function () { var o = "div[id^='#" + this.baseHref + "']", n = CKEDITOR.plugins.footnotes.getNotesById(this.getIdHref), r = this.getArea(), u, f, t, i, e; if (r) { for (u = r.find(o), f = n.getId() ? parseInt(n.getId().substring(4)) : 0, t = 0; t < u.count(); t++)if (i = u.getItem(t), e = i.getId() ? parseInt(i.getId().substring(4)) : 0, f > e) { n.insertAfter(i); return } r.append(n) } }; this.setNumber = function (n) { for (var e, f = CKEDITOR.plugins.section.getElementsBySection(n), o = this.baseHref, t = 0, s = function (n) { var i = f[n], e; if (!i || i.length === 0 || (e = u(new CKEDITOR.FootnoteElement(i[0]).getArea()), !e)) return "continue"; i.forEach(function (n, i) { var c, f; if (!n.getAscendantByClass(CKEDITOR.plugins.StructureName.EndNoteClass)) { e.RestartRules === 0 ? t++ : t = i; var s = r(t, e.NumberStyle), h = o === "_ftn" ? "FootnoteReference" : "EndnoteReference", u = n.findOne("." + h); u && u.setText("[" + s + "]"); c = new CKEDITOR.FootnoteElement(n); f = CKEDITOR.plugins.footnotes.getNotesById(c.getIdHref); f && (u = f.findOne("." + h), u && u.setText("[" + s + "]")) } }) }, i = 0; i < f.length; i++)e = s(i), e === "continue"; CKEDITOR.MutationObserver.takeRecords() } } } })();